"use strict";
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (_) try {
            if (f = 1, y && (t = y[op[0] & 2 ? "return" : op[0] ? "throw" : "next"]) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [0, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
var error_message_1 = require("../classes/error-message");
var populate_error_message_1 = require("../populate-error-message");
var koa_1 = require("../request-extractors/koa");
/**
 * The koaErrorHandler should be placed at the beginning of the koa middleware
 * stack and should catch the yield of the output of the request handling chain.
 * The Koa error handler returns the actual error handler which will be used in
 * the request chain handling and this function corresponds to the format given
 * in: https://github.com/koajs/koa/wiki/Error-Handling.
 * @function koaErrorHandler
 * @param {AuthClient} - The API client instance to report errors to Stackdriver
 * @param {NormalizedConfigurationVariables} - The application configuration
 * @returns {Function} - The function used to catch errors yielded by downstream
 *  request handlers.
 */
function koaErrorHandler(client, config) {
    /**
     * The actual error handler for the Koa plugin attempts to yield the results
     * of downstream request handlers and will attempt to catch errors emitted by
     * these handlers.
     * @param {Function} next - the result of the request handlers to yield
     * @returns {Undefined} does not return anything
     */
    return function (next) {
        var svc, err_1, em;
        return __generator(this, function (_a) {
            switch (_a.label) {
                case 0:
                    svc = config.getServiceContext();
                    _a.label = 1;
                case 1:
                    _a.trys.push([1, 3, , 4]);
                    return [4 /*yield*/, next];
                case 2:
                    _a.sent();
                    return [3 /*break*/, 4];
                case 3:
                    err_1 = _a.sent();
                    em = new error_message_1.ErrorMessage()
                        .consumeRequestInformation(koa_1.koaRequestInformationExtractor(this.request, this.response))
                        .setServiceContext(svc.service, svc.version);
                    populate_error_message_1.populateErrorMessage(err_1, em);
                    client.sendError(em);
                    return [3 /*break*/, 4];
                case 4: return [2 /*return*/];
            }
        });
    };
}
exports.koaErrorHandler = koaErrorHandler;
//# sourceMappingURL=koa.js.map