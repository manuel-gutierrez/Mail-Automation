/// <reference types="node" />
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
import * as types from '../types';
export declare const common: types.Common;
import { Configuration } from '../configuration';
import { ErrorMessage } from '../classes/error-message';
import * as http from 'http';
/**
 * The RequestHandler constructor initializes several properties on the
 * RequestHandler instance and create a new request factory for requesting
 * against the Error Reporting API.
 * @param {Configuration} config - The configuration instance
 * @param {Object} logger - the logger instance
 * @class RequestHandler
 * @classdesc The RequestHandler class provides a centralized way of managing a
 * pool of ongoing requests and routing there callback execution to the right
 * handlers. The RequestHandler relies on the diag-common request factory
 * and therefore only manages the routing of execution to the proper callback
 * and does not do any queueing/batching. The RequestHandler instance has
 * several properties: the projectId property is used to create a correct url
 * for interacting with the API and key property can be optionally provided a
 * value which can be used in place of default application authentication. The
 * shouldReportErrors property will dictate whether or not the handler instance
 * will attempt to send payloads to the API. If it is false the handler will
 * immediately call back to the completion callback with a constant error value.
 * @property {Function} _request - a npm.im/request style request function that
 *  provides the transport layer for requesting against the Error Reporting API.
 *  It includes retry and authorization logic.
 * @property {String} _projectId - the project id used to uniquely identify and
 *  address the correct project in the Error Reporting API
 * @property {Object} _logger - the instance-cached logger instance
 */
export declare class RequestHandler extends common.Service {
    private _config;
    private _logger;
    /**
     * Returns a query-string request object if a string key is given, otherwise
     * will return null.
     * @param {String|Null} [key] - the API key used to authenticate against the
     *  service in place of application default credentials.
     * @returns {Object|Null} api key query string object for use with request or
     *  null in case no api key is given
     * @static
     */
    static manufactureQueryString(key: string | null): {
        key: string | null;
    } | null;
    /**
     * No-operation stub function for user callback substitution
     * @param {Error|Null} err - the error
     * @param {Object|Null} response - the response object
     * @param {Any} body - the response body
     * @returns {Null}
     * @static
     */
    static noOp(): null;
    /**
     * @constructor
     * @param {Configuration} config - an instance of the Configuration class
     * @param {Logger} logger - an instance of logger
     */
    constructor(config: Configuration, logger: types.Logger);
    /**
     * Creates a request options object given the value of the error message and
     * will callback to the user supplied callback if given one. If a callback is
     * not given then the request will execute and silently dissipate.
     * @function sendError
     * @param {ErrorMessage} payload - the ErrorMessage instance to JSON.stringify
     *  for submission to the service
     * @param {RequestHandler~requestCallback} [userCb] - function called when the
     *  request has succeeded or failed.
     * @returns {Undefined} - does not return anything
     * @instance
     */
    sendError(errorMessage: ErrorMessage, userCb?: (err: Error | null, response: http.ServerResponse | null, body: {}) => void): void;
}
